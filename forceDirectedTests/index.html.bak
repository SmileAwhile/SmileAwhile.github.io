<!DOCTYPE html>
<html>
<head>
  <title>Monthly Global Land-Surface Temperature</title>
  <link rel="stylesheet" href="./flags.min.css" />
  <script src="https://d3js.org/d3.v4.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
</head>
<style>
body {
	background-color: blue;
}

h1 {
	text-align: center;
}



#tooltip {
	display: none;
	padding: 3px;
	border-radius: 2px;
	box-shadow: -2px 2px 10px black;
	z-index: 1;
	position: absolute;
	background-color: white;
}

#selection {
	width: 1000px;
	height: 800px;
	margin: auto;
	box-shadow: -3px 3px 20px black;
	background-color: black;
}

.links {
	stroke-width: 1px;
	stroke: red;
}




</style>
<body>
  <div class="outer">
    <a href="http://smileawhile.github.io"><button class="btn btn-success">HOME</button></a>
    <div class="chart"></div>

  <script>

  d3.json("https://raw.githubusercontent.com/DealPete/forceDirected/master/countries.json", function(dataJ) {



    // set margin and width, height, month names and color buckets
    var margin = {top: 75, right: 100, bottom: 70, left: 70},
        width = 1200 - margin.left - margin.right,
        height = 1000 - margin.top - margin.bottom;

    // go through data array and set Month value, year value, variance value, actual temp value, and month name
/*    data.forEach(function(d, i) {
        node.push(d);
    });

    links.forEach(function(l) {
        link.push(l);
    });
*/
    var data = dataJ.nodes;




    var simulation = d3.forceSimulation(dataJ.nodes)
        .force("charge", d3.forceManyBody())
        .force("link", d3.forceLink(dataJ.links).distance(20).strength(1))
        .force("center", d3.forceCenter(width/2, height/2));

    dataJ.nodes.forEach((d,i)=>{
      dataJ.nodes[i].x=0;
      dataJ.nodes[i].y=0;
    });

    // create tooltip variable
    var div = d3.select("body").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);


    // create svg on #selection
    var svg = d3.select(".chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform",
              "translate(" + margin.left + "," + margin.top + ")");
/*
    var defs = svg.append('svg:defs');

    defs.append("pattern")
      .attr("id", "flags")
      .attr("width", 288)
      .attr("height", 192)
      .append("image")
      .attr("xlink:href", "./flags.png")
      .attr("width", 288)
      .attr("height", 192);
*/

    var link = svg.append("g")
          .attr("class", "links")
        .selectAll("line")
        .data(dataJ.links)
        .enter().append("line")
          .attr("stroke-width", function(d) { return Math.sqrt(d.value); });


    var node = d3.select("g").append("div").attr("class", "node");

    node.selectAll("img")
        .data(dataJ.nodes)
        .enter().append("img")
        .attr("class", function(d) { return "flag flag-" + d.code + " node"; })
        .style("left",(d)=>{  return (width/2+d.x)+"px"; })
        .style("top",(d)=>{  return (height/2+d.y)+"px"; })
        .attr("id", (d,i)=>{ return "node"+i; } )
        .call(d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            .on("end", dragended));


/*
    var node = svg.append("g")
        .attr("class", "nodes")
      .selectAll("div")
      .data(dataJ.nodes)
      .enter().append("div")
        .attr("class", function(d) { return "flag flag-" + d.code + " node"; })
        .call(d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            .on("end", dragended));



/*
    var node = svg.append("g")
          .attr("class", "nodes")
        .selectAll("rect")
        .data(dataJ.nodes)
        .enter().append("rect")
          .attr("width", 18)
          .attr("height", 12)
          .attr("fill", 'none')
          .append("image")
          .attr("xlink:href", "./flags.png")
          .attr("width", 18)
          .attr("height", 12)
          .attr("class", function(d) { return "flag flag-" + d.code + " node"; })
          .call(d3.drag()
              .on("start", dragstarted)
              .on("drag", dragged)
              .on("end", dragended));

        /*
        .enter().append("img")
        .attr("src", "./flags.png")
//        .attr("class", function(d) { return "flag flag-" + d.code + " node"; })

*/



        simulation
            .nodes(dataJ.nodes)
            .on("tick", ticked)
            .on('end',()=>{
               simulation.nodes().forEach((d,i)=>{
               $(".node"+i).css("fill","#0F0");
               });
             });

        simulation.force("link")
            .links(dataJ.links);

      function ticked() {
        link
            .attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });

        simulation.nodes().forEach((d,i)=>{
          $("#node"+i).css("left",(d.x+width/2)+"px");
          $("#node"+i).css("top",(d.y+height/2)+"px");
        });

      }

        function dragstarted(d) {
          if (!d3.event.active) simulation.alphaTarget(0.3).restart();
          d.fx = d.x;
          d.fy = d.y;
        }

        function dragged(d) {
          d.fx = d3.event.x;
          d.fy = d3.event.y;
        }

        function dragended(d) {
          if (!d3.event.active) simulation.alphaTarget(0);
          d.fx = null;
          d.fy = null;
        }


          /*p
          svg.selectAll(".rect")
            .data(data)
          .enter().append("rect")
            .attr("class", "rect")
            .attr("x", function(d) { return xScale(d.year); })
            .attr("y", function(d) { return yScale(d.month / 1.1); }) // offset for proper placement
            .attr("width", gridWidth)
            .attr("height", gridHeight)
            .style("fill", function(d) { return colorScale(d.temp); })
            .on("mouseover", function(d) {   // mouseover tooltip
                div.transition()
                    .duration(200)
                    .style("opacity", .9);
                div.html(d.year + " - " + d.monthName + "<br/>" + (Math.floor(d.temp * 100)/100).toFixed(2) + " &degC<br/>" + d.variance + " &degC")
                    .style("left", (d3.event.pageX - 125) + "px")
                    .style("top", (d3.event.pageY - 28) + "px");
                })
            .on("mouseout", function(d) {    // return to normal after mouse leaves
                div.transition()
                    .duration(500)
                    .style("opacity", 0);
            });



            //Create a legend

            var blockWidth = 35;
            var blockHeight = 20;

            var legend = svg.selectAll(".legend")
              .data(colorQuantiles)
              .enter()
              .append("g")
              .attr("class", "legend")
              .attr("font-size", "14px")
              .attr("font-style", "PT Sans")
              .attr("transform", function(d, i) {

                return ("translate(" + i * blockWidth + ",0)")

              });

            legend.append("rect")
              .attr("x", (width / 5) * 3)
              .attr("y", height + (margin.bottom / 3))
              .attr("width", blockWidth)
              .attr("height", blockHeight)
              .style("fill", function(d, i) {

                return (colors[i]);

              });

            legend.append("text")
              .attr("x", ((width / 5) * 3) + (blockWidth / 2))
              .attr("y", (height + (margin.bottom / 3)) + blockHeight + 15)
              .text(function(d, i) {

                return colorQuantiles[i].toFixed(1);

              })
              .style("text-anchor", "middle");


          // heading
            svg.append("g")
                .append("text")
                .attr("fill", "black")
                .attr("y", -60)
                .style("font-size", "40px")
                .style("font-family", "cambria")
                .text("Monthly Global Land-Surface Temperature")
                .attr("transform", "translate (100, 20)");

            // extra information at bottom of canvas
            d3.select("#selection").append("p")
                .style("color", "slategrey")
                .style("font-family", "cambria")
                .style("text-align", "center")
                .text("Temperatures are in Celsius and reported as anomalies relative to the Jan 1951-Dec 1980 average. Estimated Jan 1951-Dec 1980 absolute temperature â„ƒ: 8.66 +/- 0.07");

*/

    });  // end of d3 data function

  </script>


</body>
</html>
